plugins {
    id 'java-library'
    id 'maven-publish'
}

base {
    archivesName = "${archive_base_name}-${project.name}-${minecraft_version}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
    exclusiveContent {
        forRepository {
            maven {
                name = 'Sponge'
                url = 'https://repo.spongepowered.org/repository/maven-public'
            }
        }
        filter {
            includeGroupAndSubgroups('org.spongepowered')
        }
    }
    exclusiveContent {
        forRepositories(
                maven {
                    name = 'ParchmentMC'
                    url = 'https://maven.parchmentmc.org/'
                },
                maven {
                    name = "NeoForge"
                    url = 'https://maven.neoforged.net/releases'
                }
        )
        filter {
            includeGroup('org.parchmentmc.data')
        }
    }
    maven {
        name = 'BlameJared'
        url = 'https://maven.blamejared.com'
    }
}

['apiElements', 'runtimeElements', 'sourcesElements', 'javadocElements'].each {variant ->
    configurations."${variant}".outgoing {
        capability("${mod_group}:${mod_name}:${mod_version}")
        capability("${mod_group}:${base.archivesName.get()}:${mod_version}")
        capability("${mod_group}:${mod_id}-${project.name}-${minecraft_version}:${mod_version}")
        capability("${mod_group}:${mod_id}:${mod_version}")
    }
    publishing.publications.configureEach {
        suppressPomMetadataWarningsFor(variant)
    }
}

sourcesJar {
    from(project.rootDir) {
        include 'LICENSE*'
        rename 'LICENSE(.+)?', "LICENSE_${mod_id}\$1"
    }
}

jar {
    from(project.rootDir) {
        include 'LICENSE*'
        rename 'LICENSE(.+)?', "LICENSE_${mod_id}\$1"
    }

    manifest {
        attributes([
            'Specification-Title'   : mod_name,
            'Specification-Vendor'  : mod_author,
            'Specification-Version' : project.jar.archiveVersion,
            'Implementation-Title'  : project.name,
            'Implementation-Version': project.jar.archiveVersion,
            'Implementation-Vendor' : mod_author,
            'Built-On-Minecraft'    : minecraft_version
        ])
    }
}

processResources {
    var expandProps = [
        'mod_version'               : mod_version,
        'mod_group'                 : mod_group,
        'mod_name'                  : mod_name,
        'mod_author'                : mod_author,
        'mod_id'                    : mod_id,
        'mod_license'               : mod_license,
        'mod_description'           : mod_description,
        'mod_credits'               : mod_credits,
        'mod_url'                   : mod_url,
        'mod_update_url'            : mod_update_url,
        'java_version'              : java_version,
        'mod_issue_tracker_url'     : mod_issue_tracker_url,
        'minecraft_version'         : minecraft_version,
        'minecraft_version_range'   : minecraft_version_range,
        'forge_version'             : forge_version,
        'forge_loader_version_range': forge_loader_version_range,
        'fabric_version'            : fabric_version,
        'fabric_loader_version'     : fabric_loader_version
    ]

    var jsonExpandProps = expandProps.collectEntries {
        key, value -> [(key): value instanceof String ? value.replace("\n", "\\\\n") : value]
    }

    filesMatching(['META-INF/mods.toml']) {
        expand expandProps
    }

    filesMatching(['pack.mcmeta', 'fabric.mod.json', '*.mixins.json']) {
        expand jsonExpandProps
    }

    inputs.properties(expandProps)
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url System.getenv('local_maven_url')
        }
    }
}
